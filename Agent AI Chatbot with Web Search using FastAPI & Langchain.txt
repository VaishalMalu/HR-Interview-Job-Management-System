from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from langchain.memory import ConversationBufferWindowMemory
from langchain.agents import initialize_agent, Tool
from langchain.tools import SerpAPIWrapper
from langchain.chat_models import ChatOpenAI
import os

app = FastAPI()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
SERP_API_KEY = os.getenv("SERP_API_KEY")

if not GROQ_API_KEY or not SERP_API_KEY:
    raise ValueError("API keys not set. Please set GROQ_API_KEY and SERP_API_KEY.")

memory = ConversationBufferWindowMemory(k=5)

llm = ChatOpenAI(
    model_name="llama3-70b-8192",
    openai_api_key=GROQ_API_KEY,
    openai_api_base="https://api.groq.com/openai/v1"
)

search_tool = SerpAPIWrapper(serpapi_api_key=SERP_API_KEY)

tools = [
    Tool(
        name="Web Search",
        func=search_tool.run,
        description="Searches the web for real-time information"
    )
]

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent="zero-shot-react-description",
    memory=memory,
    verbose=True
)
class ChatRequest(BaseModel):
    message: str
@app.post("/chat")
async def chat(request: ChatRequest):
    try:
        response = agent.run(request.message)
        return {"response": response}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
